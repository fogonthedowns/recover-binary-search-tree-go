You are given the root of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Follow up: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?

Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.

Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.

---------------------------
O(N) Time & Space

Recursive Inorder Traversal

Recursive inorder traversal is extremely simple: follow Left->Node->Right direction, i.e. do the recursive call for the left child, then do all the business with the node (= if the node is the swapped one or not), and then do the recursive call for the right child.

